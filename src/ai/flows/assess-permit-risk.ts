// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A permit risk assessment AI agent.
 *
 * - assessPermitRisk - A function that handles the permit risk assessment process.
 * - AssessPermitRiskInput - The input type for the assessPermitRisk function.
 * - AssessPermitRiskOutput - The return type for the assessPermitRisk function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AssessPermitRiskInputSchema = z.object({
  description: z.string().describe('The description of the permit.'),
  ppeChecklist: z.string().describe('The PPE checklist for the permit.'),
});
export type AssessPermitRiskInput = z.infer<typeof AssessPermitRiskInputSchema>;

const AssessPermitRiskOutputSchema = z.object({
  riskLevel: z
    .string()
    .transform((val) => val.toLowerCase())
    .pipe(z.enum(['low', 'medium', 'high']))
    .describe('The risk level of the permit.'),
  justification: z
    .string()
    .describe('The justification for the risk level assessment.'),
});
export type AssessPermitRiskOutput = z.infer<typeof AssessPermitRiskOutputSchema>;

export async function assessPermitRisk(input: AssessPermitRiskInput): Promise<AssessPermitRiskOutput> {
  return assessPermitRiskFlow(input);
}

const prompt = ai.definePrompt({
  name: 'assessPermitRiskPrompt',
  input: {schema: AssessPermitRiskInputSchema},
  output: {schema: AssessPermitRiskOutputSchema},
  prompt: `You are a an expert safety officer for a large industrial plant. Your role is to assess the risk level of a work permit based on its description and the required Personal Protective Equipment (PPE).

Your assessment must determine if the risk is 'low', 'medium', or 'high'. You must also provide a concise justification for your assessment, explaining the key factors that led to your decision.

Analyze the following permit details and provide your risk assessment.

Permit Details:
Description: {{{description}}}
PPE Checklist: {{{ppeChecklist}}}`,
});

const assessPermitRiskFlow = ai.defineFlow(
  {
    name: 'assessPermitRiskFlow',
    inputSchema: AssessPermitRiskInputSchema,
    outputSchema: AssessPermitRiskOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    if (!output) {
      throw new Error('The AI failed to generate a valid risk assessment.');
    }
    return output;
  }
);
