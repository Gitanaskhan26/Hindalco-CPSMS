// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A permit risk assessment AI agent.
 *
 * - assessPermitRisk - A function that handles the permit risk assessment process.
 * - AssessPermitRiskInput - The input type for the assessPermitRisk function.
 * - AssessPermitRiskOutput - The return type for the assessPermitRisk function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AssessPermitRiskInputSchema = z.object({
  description: z.string().describe('The description of the permit.'),
  ppeChecklist: z.string().describe('The PPE checklist for the permit.'),
});
export type AssessPermitRiskInput = z.infer<typeof AssessPermitRiskInputSchema>;

const AssessPermitRiskOutputSchema = z.object({
  riskLevel: z
    .string()
    .transform((val) => val.toLowerCase())
    .pipe(z.enum(['low', 'medium', 'high']))
    .describe("The assessed risk level. MUST be one of 'low', 'medium', or 'high'."),
  justification: z
    .string()
    .describe('A concise justification for the assessed risk level, explaining the key factors.'),
});
export type AssessPermitRiskOutput = z.infer<typeof AssessPermitRiskOutputSchema>;

export async function assessPermitRisk(input: AssessPermitRiskInput): Promise<AssessPermitRiskOutput> {
  return assessPermitRiskFlow(input);
}

const prompt = ai.definePrompt({
  name: 'assessPermitRiskPrompt',
  input: {schema: AssessPermitRiskInputSchema},
  output: {schema: AssessPermitRiskOutputSchema},
  system: `You are an expert safety officer. Your only task is to assess the risk of a work permit and respond in the requested JSON format. Do not add any other text or markdown formatting. The 'riskLevel' MUST be one of 'low', 'medium', or 'high'.`,
  prompt: `Analyze the following permit details and provide your risk assessment.

Permit Details:
Description: {{{description}}}
PPE Checklist: {{{ppeChecklist}}}`,
});

const assessPermitRiskFlow = ai.defineFlow(
  {
    name: 'assessPermitRiskFlow',
    inputSchema: AssessPermitRiskInputSchema,
    outputSchema: AssessPermitRiskOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    if (!output) {
      throw new Error('The AI failed to generate a structured JSON response. Please try again.');
    }
    return output;
  }
);
